This sprint, triggers were created to update a player's status to "inactive" if a player goes offline and delete a tuple if the player item's item count is less than 1. This covers back-end engineering. Constraints were created to ensure that drop rates cannot go above 100% or below 0%, and player item amount cannot be greater than 200. These cover data modelling. 

Ternary logic was also implemented via the coalesce function, which takes the NULL values of a column and replaces it with a value of our choosing; this covers level 3 data modeling. We expressed our understanding of simplifying complex queries by creating something with several sub-queries, and showing that it can be reduced to a single query with no sub-queries. 

We also demonstrated that our complex query from sprint 2 could not be simplified further. Queries with outer joins were also done. This covers level 3 of data analytics. We then tested our code by performing a drop statement and ensuring that values properly cascaded, and included code to set our isolation levels.












Some improvements we would make to the database would be sharding, back-end code and denormalization.
For sharding, we would implement geographical sharding by having the players table contain a new column containing geographical information. We would then proceed to split the players table based on this attribute, allowing for greater speed in retrieval of player information, as in our fantasy our game would be global, thus requiring multiple databases across the world.
For back-end code, we would ideally program a back-end in Python or Java. Using our previous experience in python programming in SENG 265 and coops we could implement scripts to automatically add player information into our database, and also maintain our database integrity when MySQL can't.

Lastly, we would look into denormalizing our database. Since we are using a OLAP model for our database, we are primarily concerned about analyzing our data and what patterns we can find/track. Denormalizing our database would allow us to perform less joins in order to find out important information we would be interested in. Additionally, denormalizing our database would allow us to add constraints that we normally can't in a normalized database in MySQL. For example, we could add a constraint in players, where only a certain quantity of players can enter a location. That way we could prevent a region from being overcrowded, leading to a better overall experience.